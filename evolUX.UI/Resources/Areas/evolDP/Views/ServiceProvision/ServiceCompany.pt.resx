<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Action" xml:space="preserve">
    <value>Ação</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="ChangeServiceCompanyRestriction" xml:space="preserve">
    <value>Alterar configurações dos Equipamentos </value>
  </data>
  <data name="CompanyAddress" xml:space="preserve">
    <value>Morada</value>
  </data>
  <data name="CompanyCode" xml:space="preserve">
    <value>Código</value>
  </data>
  <data name="CompanyCountry" xml:space="preserve">
    <value>País</value>
  </data>
  <data name="CompanyName" xml:space="preserve">
    <value>Nome</value>
  </data>
  <data name="CompanyPostalCode" xml:space="preserve">
    <value>Código Postal</value>
  </data>
  <data name="CompanyPostalCodeDescription" xml:space="preserve">
    <value>Localidade</value>
  </data>
  <data name="CostDate" xml:space="preserve">
    <value>Data Início das configurações</value>
  </data>
  <data name="EmptyField" xml:space="preserve">
    <value>&lt;vazio&gt;</value>
  </data>
  <data name="FeedPaper" xml:space="preserve">
    <value>Impressoras de folha solta</value>
  </data>
  <data name="FileSheetsCutoffLevel" xml:space="preserve">
    <value>Referência para limite de folhas por ficheiro</value>
  </data>
  <data name="FileSheetsCutoffLevelTip" xml:space="preserve">
    <value>Indica o n.º máximo de folhas a partir do qual se deve criar novo ficheiro de produção</value>
  </data>
  <data name="ID" xml:space="preserve">
    <value>ID</value>
  </data>
  <data name="MaterialPosition" xml:space="preserve">
    <value>N.º Máximo de Bandejas / Estações</value>
  </data>
  <data name="MaterialPositionTip" xml:space="preserve">
    <value>N.º máximo de Bandejas de papel nas impressoras ou Estações de Envelopagem nas envelopadoras</value>
  </data>
  <data name="MaterialPositionTypeFeedPaper" xml:space="preserve">
    <value>Bandejas</value>
  </data>
  <data name="MaterialPositionTypeRollPaper" xml:space="preserve">
    <value />
  </data>
  <data name="MaterialPositionTypeStation" xml:space="preserve">
    <value>Estações</value>
  </data>
  <data name="MaterialType" xml:space="preserve">
    <value>Tipo de Equipamento</value>
  </data>
  <data name="NoModelData" xml:space="preserve">
    <value>Sem Dados</value>
  </data>
  <data name="RegistModeTip" xml:space="preserve">
    <value>Flag que indica se é atribuido um ID a cada objeto postal para rastreio de correio.</value>
  </data>
  <data name="RestrictionMode" xml:space="preserve">
    <value>Excesso de Adicionais de Envelopagem</value>
  </data>
  <data name="RestrictionMode0" xml:space="preserve">
    <value>Impede Produção do Objecto Postal</value>
  </data>
  <data name="RestrictionMode1" xml:space="preserve">
    <value>Obriga a envelopagem manual do objecto postal</value>
  </data>
  <data name="RestrictionModeTip" xml:space="preserve">
    <value>Ação em caso de n.º de adicionais de envelopagem exceder o n.º máximo de estações</value>
  </data>
  <data name="RollPaper" xml:space="preserve">
    <value>Impressoras de papel contínuo</value>
  </data>
  <data name="SeparationMode" xml:space="preserve">
    <value>Separação por escalões de expedição</value>
  </data>
  <data name="SeparationModeTip" xml:space="preserve">
    <value>Flag que indica se a alteração de escalão de expedição obriga a ficheiros de produção diferentes.</value>
  </data>
  <data name="Service" xml:space="preserve">
    <value>Serviço</value>
  </data>
  <data name="ServiceCompany" xml:space="preserve">
    <value>Companhia de Prestação de Serviços</value>
  </data>
  <data name="ServiceCompanyChange" xml:space="preserve">
    <value>Alterar dados da Companhia</value>
  </data>
  <data name="ServiceCompanyConfig" xml:space="preserve">
    <value>Configuração de Custos de Serviços</value>
  </data>
  <data name="ServiceCompanyExpCodes" xml:space="preserve">
    <value>Ver configurações de Escalões de Envelopagem</value>
  </data>
  <data name="ServiceType" xml:space="preserve">
    <value>Tipo de Serviços</value>
  </data>
  <data name="Station" xml:space="preserve">
    <value>Envelopadoras</value>
  </data>
  <data name="SubmitChange" xml:space="preserve">
    <value>Alterar</value>
  </data>
</root>