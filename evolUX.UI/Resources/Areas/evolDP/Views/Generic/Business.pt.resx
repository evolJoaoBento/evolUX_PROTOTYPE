<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Action" xml:space="preserve">
    <value>Ação</value>
  </data>
  <data name="Business" xml:space="preserve">
    <value>Área de Negócio</value>
  </data>
  <data name="BusinessCode" xml:space="preserve">
    <value>Código</value>
  </data>
  <data name="BusinessDescription" xml:space="preserve">
    <value>Área de Negócio</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="ChangeBusiness" xml:space="preserve">
    <value>Alterar configurações da Área de Negócio</value>
  </data>
  <data name="ChangeCompany" xml:space="preserve">
    <value>Alterar dados da Companhia</value>
  </data>
  <data name="Company" xml:space="preserve">
    <value>Companhia</value>
  </data>
  <data name="CompanyAddress" xml:space="preserve">
    <value>Morada</value>
  </data>
  <data name="CompanyCode" xml:space="preserve">
    <value>Código</value>
  </data>
  <data name="CompanyCountry" xml:space="preserve">
    <value>País</value>
  </data>
  <data name="CompanyDetail" xml:space="preserve">
    <value>Ver configurações para Companhia / Área de Negócio</value>
  </data>
  <data name="CompanyName" xml:space="preserve">
    <value>Nome</value>
  </data>
  <data name="CompanyPostalCode" xml:space="preserve">
    <value>Código Postal</value>
  </data>
  <data name="CompanyPostalCodeDescription" xml:space="preserve">
    <value>Localidade</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Descrição</value>
  </data>
  <data name="EmptyField" xml:space="preserve">
    <value>&lt;vazio&gt;</value>
  </data>
  <data name="ExternalExpeditionMode" xml:space="preserve">
    <value>Método de alteração de Companhia de Expedição</value>
  </data>
  <data name="ExternalExpeditionMode-1" xml:space="preserve">
    <value>Respeitar configuração ao nível da Área de Negócio</value>
  </data>
  <data name="ExternalExpeditionMode0" xml:space="preserve">
    <value>Não mudar de Companhia</value>
  </data>
  <data name="ExternalExpeditionMode1" xml:space="preserve">
    <value>Muda de Companhia por Código Postal</value>
  </data>
  <data name="ExternalExpeditionMode2" xml:space="preserve">
    <value>Muda de Companhia por intervalos de Códigos Postais</value>
  </data>
  <data name="ExternalExpeditionModeTip" xml:space="preserve">
    <value>Se o documento não tiver especificado o Modo de alteração de Companhia de Expedição, prevalece o modo associado ao Tipo de Tratamento se definido senão prevalece o modo associado à Área de negócio</value>
  </data>
  <data name="FileSheetsCutoffLevel" xml:space="preserve">
    <value>Referência para limite de folhas por ficheiro</value>
  </data>
  <data name="FileSheetsCutoffLevelTip" xml:space="preserve">
    <value>Indica o n.º máximo de folhas a partir do qual se deve criar novo ficheiro de produção</value>
  </data>
  <data name="ID" xml:space="preserve">
    <value>ID</value>
  </data>
  <data name="InternalCodeLen" xml:space="preserve">
    <value>N.º de digitos do código interno</value>
  </data>
  <data name="InternalCodeStart" xml:space="preserve">
    <value>Início do código interno</value>
  </data>
  <data name="InternalCodeStartTip" xml:space="preserve">
    <value>Valor da posição, dentro do código de separação de expedição, onde o código interno se inicia, esta posição é contabilizada do dígito (-) significativo para o (+) significativo</value>
  </data>
  <data name="InternalExpedition" xml:space="preserve">
    <value>Expedição Interna</value>
  </data>
  <data name="InternalExpeditionMode" xml:space="preserve">
    <value>Método</value>
  </data>
  <data name="InternalExpeditionMode1" xml:space="preserve">
    <value>Um objeto postal por código</value>
  </data>
  <data name="InternalExpeditionMode1Tip" xml:space="preserve">
    <value>Um único Objeto postal por cada código de separação de expedição
diferente, gerando uma banner que pertence ao objeto postal</value>
  </data>
  <data name="InternalExpeditionMode2" xml:space="preserve">
    <value>Impressão de Banners separadoras</value>
  </data>
  <data name="InternalExpeditionMode2Tip" xml:space="preserve">
    <value>Impressão de Banners separadoras, por cada alteração significativa no código de separação de expedição</value>
  </data>
  <data name="InternalExpeditionMode4" xml:space="preserve">
    <value>Shift na envelopadora</value>
  </data>
  <data name="InternalExpeditionMode4Tip" xml:space="preserve">
    <value>Shift na envelopadora por cada alteração significativa no código de separação de expedição</value>
  </data>
  <data name="InternalExpeditionModeTip" xml:space="preserve">
    <value>Identifica a forma como a expedição interna deve ser efetuada (as opções dependem se a Companhia de Prestação de Serviços consegue providenciar ou não o serviço)</value>
  </data>
  <data name="NoModelData" xml:space="preserve">
    <value>Sem Dados</value>
  </data>
  <data name="PostObjOrderMode" xml:space="preserve">
    <value>Método de ordenação num objeto postal</value>
  </data>
  <data name="PostObjOrderMode0" xml:space="preserve">
    <value>Retenção e Prioridade</value>
  </data>
  <data name="PostObjOrderMode0Tip" xml:space="preserve">
    <value>Primeiro os documentos que esgotaram o tempo de retenção e depois por prioridade associada ao tipo de documento</value>
  </data>
  <data name="PostObjOrderMode1" xml:space="preserve">
    <value>Antiguidade</value>
  </data>
  <data name="PostObjOrderMode1Tip" xml:space="preserve">
    <value>Por ordem de registo na base de dados (mais antigos primeiro)</value>
  </data>
  <data name="PostObjOrderModeTip" xml:space="preserve">
    <value>Indica a forma de ordenação dos documentos dentro de um objeto postal</value>
  </data>
  <data name="SubmitAdd" xml:space="preserve">
    <value>Adicionar</value>
  </data>
  <data name="SubmitChange" xml:space="preserve">
    <value>Alterar</value>
  </data>
  <data name="TotalBannerPages" xml:space="preserve">
    <value>Total de folhas de Banner</value>
  </data>
  <data name="TotalBannerPagesTip" xml:space="preserve">
    <value>Total de folhas de Banner usadas em cada ficheiro de impressão</value>
  </data>
</root>