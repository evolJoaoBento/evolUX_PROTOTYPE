@using Shared.Models.Areas.evolDP
@using Shared.ViewModels.Areas.evolDP
@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer localizer
@inject IConfiguration configuration

@model DocCodeConfigOptionsViewModel;
@{
    string siteURL = configuration.GetValue<string>("evolUXSiteURL");
    var json = JsonConvert.SerializeObject(Model.SuportTypeList);

    bool AddDocCode = false;
    if (Model.Permissions.Find(x => x == "AddDocCode") != null) { AddDocCode = true; }
}
<script>
    var suporTypeList = @Html.Raw(json);
    const invalidDateStr = '@localizer["InvalidDate"]';
</script>
@if (Model == null)
{
    <tr><td colspan="5" class="text-center">@localizer["NoModelData"]</td></tr>
}
else
{
    string disable = "";
    if (!AddDocCode)
        disable = "disabled";
    string value;
    string docTypeDesc = "";
    string eLevel1Desc = "";
    string eLevel2Desc = "";
    string eLevel3Desc = "";
    string starDateDesc = "";

    string sourceDesc = "DocCodeConfig";
    if (!string.IsNullOrEmpty(TempData["Source"]?.ToString()))
        sourceDesc = TempData["Source"].ToString();

    int suportType = 0;
    string submitTag = "SubmitAdd";
    if (sourceDesc == "DocCodeConfigChange" || sourceDesc == "DocCodeChange")
        submitTag = "SubmitChange";
    GenericOptionValue OptionValue;
    string ExceptionLevel1IDLabel = TempData["ExceptionLevel1ID"]?.ToString();
    if (string.IsNullOrEmpty(ExceptionLevel1IDLabel))
        ExceptionLevel1IDLabel = localizer["ExceptionLevel1ID"].Value;
    string ExceptionLevel2IDLabel = TempData["ExceptionLevel2ID"]?.ToString();
    if (string.IsNullOrEmpty(ExceptionLevel2IDLabel))
        ExceptionLevel2IDLabel = localizer["ExceptionLevel2ID"].Value;
    string ExceptionLevel3IDLabel = TempData["ExceptionLevel3ID"]?.ToString();
    if (string.IsNullOrEmpty(ExceptionLevel3IDLabel))
        ExceptionLevel3IDLabel = localizer["ExceptionLeve3ID"].Value;
        foreach (GenericOptionValue option in Model.SuportTypeList.List)
    {
        if (string.IsNullOrEmpty(TempData[option.Code]?.ToString()))
            TempData[option.Code] = localizer[option.Code].Value;
    }    
    foreach (GenericOptionValue option in Model.SuportTypeList.OptionList)
    {
        if (string.IsNullOrEmpty(TempData[option.GroupCode]?.ToString()))
            TempData[option.GroupCode] = localizer[option.GroupCode].Value;
    }
    DocCodeConfig? dConfig = null;
    if (Model.DocCodeConfig.DocCodeConfigs != null && Model.DocCodeConfig.DocCodeConfigs.Count() > 0)
        dConfig = Model.DocCodeConfig.DocCodeConfigs[0];
    <div>
        <div id="TitlePage">
            <h1>@localizer[TempData["Source"] + ""]</h1>
        </div>
        @if (sourceDesc == "AddDoc")
        {
            <a class='bx bx-left-arrow grow_01' style="color:rgb(90 205 239)" asp-area="evolDP" asp-controller="DocCode" asp-action="Index">
            </a>
        }
        else if (sourceDesc == "AddDocCode")
        {
            <a class='bx bx-left-arrow grow_01' style="color:rgb(90 205 239)" asp-area="evolDP" asp-controller="DocCode" asp-action="DocCode" asp-route-doccodeJson="@JsonConvert.SerializeObject(Model.DocCodeConfig)">
            </a>
        }
        else if (sourceDesc == "AddDocCodeConfig" || sourceDesc == "DocCodeChange"
        || sourceDesc == "DocCodeConfigChange")
        {
            <a class='bx bx-left-arrow grow_01' style="color:rgb(90 205 239)" asp-area="evolDP" asp-controller="DocCode" asp-action="GetDocCodeConfig" asp-route-doccodeJson="@JsonConvert.SerializeObject(Model.DocCodeConfig)">
            </a>
        }
    </div>
<form id="AddDocDocConfigFrm" class="d-flex justify-content-center m-5" asp-area="evolDP" asp-controller="DocCode" asp-action="RegistDocCodeConfig" asp-route-source="@sourceDesc">
    <table class="table table-sm table-hover table-collapse-seperate">
        <thead id="bootstrap-overrides" class="table-info sticky-header">
            <tr><td colspan="2">@localizer["DocCode"]</td></tr>
        </thead>
        <tbody id="bootstrap-overrides">
            @if (sourceDesc != "AddDoc")
            {
                @if (!AddDocCode || sourceDesc != "AddDocCode")
                {
                <tr>
                    <th>@localizer["DocCodeID"]</th>
                    <td>@Model.DocCodeConfig.DocCodeID
                        <input name="DocCodeID" style="display: none" value="@Model.DocCodeConfig.DocCodeID" />
                    </td>
                </tr>
                }
                <tr>
                    <th>@localizer["DocLayout"]</th>
                    <td>@Model.DocCodeConfig.DocLayout
                           <input name="DocLayout" style="display: none" value="@Model.DocCodeConfig.DocLayout" />
                    </td>
                </tr>
                <tr>
                    <th>@localizer["DocType"]</th>
                    @if (Model.DocCodeConfig.DocType == null || string.IsNullOrEmpty(Model.DocCodeConfig.DocType))
                    {
                        docTypeDesc = localizer["EmptyField"].Value;
                    }
                    else
                    {
                        docTypeDesc = Model.DocCodeConfig.DocType;
                    }
                    <td>@docTypeDesc
                        <input name="DocType" style="display: none" value="@Model.DocCodeConfig.DocType" />
                    </td>
                </tr>
            }
            else
            {
                <tr>
                    <th>@localizer["DocLayout"]</th>
                    <td><input id=DocLayout @disable name=DocLayout type="text" maxlength="20" style="width: 100%"/></td>
                </tr>
                <tr>
                    <th>@localizer["DocType"]</th>
                        <td><input id=DocType @disable name=DocType type="text" maxlength="8" style="width: 100%" /></td>
                </tr>
            }
            @if (sourceDesc != "AddDocCode"
                && sourceDesc != "AddDoc")
            {
                @if (Model.DocCodeConfig.ExceptionLevel1 == null || string.IsNullOrEmpty(Model.DocCodeConfig.ExceptionLevel1.ExceptionDescription))
                {
                    eLevel1Desc = localizer["EmptyField"].Value;
                }
                else
                {
                    eLevel1Desc = Model.DocCodeConfig.ExceptionLevel1.ExceptionDescription;
                }
                @if (Model.DocCodeConfig.ExceptionLevel2 == null || string.IsNullOrEmpty(Model.DocCodeConfig.ExceptionLevel2.ExceptionDescription))
                {
                    eLevel2Desc = localizer["EmptyField"].Value;
                }
                else
                {
                    eLevel2Desc = Model.DocCodeConfig.ExceptionLevel2.ExceptionDescription;
                }
                @if (Model.DocCodeConfig.ExceptionLevel3 == null || string.IsNullOrEmpty(Model.DocCodeConfig.ExceptionLevel3.ExceptionDescription))
                {
                    eLevel3Desc = localizer["EmptyField"].Value;
                }
                else
                {
                    eLevel3Desc = Model.DocCodeConfig.ExceptionLevel3.ExceptionDescription;
                }
                <tr>
                    <th>@ExceptionLevel1IDLabel</th>
                    <td>@eLevel1Desc</td>
                </tr>
                <tr>
                    <th>@ExceptionLevel2IDLabel</th>
                    <td>@eLevel2Desc</td>
                </tr>
                <tr>
                    <th>@ExceptionLevel3IDLabel</th>
                    <td>@eLevel3Desc</td>
                    </tr>
            }
            else
            {
                value = localizer["EmptyField"].Value;
                <tr>
                    <th>@ExceptionLevel1IDLabel</th>
                    <td>
                            <select @disable name="Exceptionslevel1ID" style="width: 100%">
                            <option value="0">@value</option>
                            @foreach (ExceptionLevel e in Model.Exceptionslevel1List)
                            {
                                <option value="@e.ExceptionLevelID">@e.ExceptionCode - @e.ExceptionDescription </option>
                            }
                        </select>
                    </td>
                </tr>
                <tr>
                    <th>@ExceptionLevel2IDLabel</th>
                    <td>
                            <select @disable name="Exceptionslevel2ID" style="width: 100%">
                            <option id="" value="0">@value</option>
                            @foreach (ExceptionLevel e in Model.Exceptionslevel2List)
                            {
                                <option id="" value="@e.ExceptionLevelID">@e.ExceptionCode - @e.ExceptionDescription </option>
                            }
                        </select>
                    </td>
                </tr>
                <tr>
                    <th>@ExceptionLevel3IDLabel</th>
                    <td>
                            <select @disable name="Exceptionslevel3ID" style="width: 100%">
                            <option id="" value="0">@value</option>
                            @foreach (ExceptionLevel e in Model.Exceptionslevel3List)
                            {
                                <option id="" value="@e.ExceptionLevelID">@e.ExceptionCode - @e.ExceptionDescription </option>
                            }
                        </select>
                    </td>
                </tr>
            }
            
            <tr>
                <th>@localizer["DocDescription"]</th>
                <td>
                    <input @disable id=DocDescription name=DocDescription type="text" maxlength="256" style="width: 100%" value="@Model.DocCodeConfig.DocDescription" />
                </td>
            </tr>
            <tr>
                <th>@localizer["PrintMatchCode"]</th>
                <td>
                    <select @disable name="PrintMatchCode" style="width: 100%">
                        @if (!string.IsNullOrEmpty(Model.DocCodeConfig.PrintMatchCode) || (value = localizer["PrintMatchCodeEmpty"].Value) == "PrintMatchCodeEmpty")
                        {
                            value = Model.DocCodeConfig.PrintMatchCode;
                        }
                        <option value="@Model.DocCodeConfig.PrintMatchCode">@value</option>
                        @foreach (string pMatch in Model.PrintMatchCodeList.Where(x => x != (string.IsNullOrEmpty(Model.DocCodeConfig.PrintMatchCode)? "" :Model.DocCodeConfig.PrintMatchCode)))
                        {
                            @if (!string.IsNullOrEmpty(pMatch) || (value = localizer["PrintMatchCodeEmpty"].Value) == "PrintMatchCodeEmpty")
                            {
                                value = pMatch;
                            }
                            <option value="@value">@pMatch</option>
                        }
                        </select>
                </td>
            </tr>
            @if (sourceDesc != "DocCodeChange")
            {
                @if (dConfig == null || sourceDesc != "DocCodeConfigChange" || !dConfig.IsEditable)
                {
                    <tr>
                        <th>@localizer["StartDate"]</th>
                        <td><input @disable id="StartDate" name="StartDate" type="date" value="@DateTime.Now.ToShortDateString()" /></td>
                    </tr>
                }
                else
                {
                    <tr>
                        <th>@localizer["StartDate"]</th>
                        @{starDateDesc = DateTime.ParseExact(dConfig.StartDate.ToString(), "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None).ToShortDateString();}
                        <td>@starDateDesc</td>
                        <td><input @disable style="display: none" id="StartDate" name="StartDate" type="date" value="@starDateDesc" /></td>
                    </tr>
                }
                <tr>
                    <th>@localizer["EnvMedia"]</th>
                    <td>
                        <select @disable name="EnvMediaID" style="width: 100%">
                        @if (dConfig != null && dConfig.EnvMediaID > 0)
                        {
                            <option value="@dConfig?.EnvMediaID">@dConfig.EnvMediaDesc</option>
                        }
                        @foreach (EnvelopeMediaGroup e in Model.EnvMediaGroups.Where(x => dConfig?.EnvMediaID == null || x.EnvMediaGroupID != dConfig?.EnvMediaID))
                        {
                            <option value="@e.EnvMediaGroupID">@e.Description</option>
                        }
                        </select>
                    </td>
                </tr>
                <tr>
                    <th>@localizer["AggrCompatibility"]</th>
                    <td>
                        <select @disable name="AggrCompatibility" style="width: 100%">
                            @if (dConfig != null && dConfig?.AggrCompatibility >= 0)
                            {
                                value = "AggCompatibility" + dConfig.AggrCompatibility.ToString();
                                <option value="@dConfig.AggrCompatibility">@localizer[@value]</option>
                            }
                            @foreach (int a in Model.AggregationList.Where(x => (dConfig == null || x != dConfig.AggrCompatibility)))
                            {
                                value = "AggCompatibility" + a.ToString();
                                <option value="@a">@localizer[value]</option>
                            }
                        </select>
                    </td>
                </tr>
                <tr>
                    <th>@localizer["Priority"]</th>
                    @if (dConfig != null && dConfig?.Priority >= 0)
                    {
                        value = dConfig.Priority.ToString();
                    }
                    else
                    {
                        value = "0";
                    }
                    <td><input @disable id="Priority" name="Priority" type="number" min="0"  value="@value" /></td>
                </tr>
                <tr>
                    <th>@localizer["ProdMaxSheets"]</th>
                    @if (dConfig != null && dConfig?.ProdMaxSheets > 0)
                    {
                        value = dConfig.ProdMaxSheets.ToString();
                    }
                    else
                    {
                        value = "";
                    }
                    <td><input @disable id="ProdMaxSheets" name="ProdMaxSheets" value="@value" /></td>
                </tr>
                <tr>
                    <th>@localizer["ExpCompany"] / @localizer["ServiceTask"]</th>
                    <td>
                        <select @disable name="ExpCode" style="width: 100%">
                            @if (dConfig != null &&  !string.IsNullOrEmpty(dConfig.ExpCode))
                            {
                                <option value="@dConfig.ExpCode">@dConfig.ExpCompanyName / @dConfig.ServiceTaskDesc</option>
                            }
                            @foreach (ExpCompanyServiceTask e in Model.ExpCodeList.Where(x => (dConfig == null || x.ExpCode != dConfig.ExpCode)))
                            {
                                <option value="@e.ExpCode">@Model.ExpCompanies.First(x => x.ID == e.ExpCompanyID).CompanyName / @Model.ServiceTasks.First(x => x.ServiceTaskID == e.ServiceTaskID).ServiceTaskDesc</option>
                            }
                        </select>
                    </td>
                </tr>
                <tr>
                    <th>@localizer["ExpeditionType"]</th>
                    <td>
                        <select @disable name="ExpeditionType" style="width: 100%">
                            @if (dConfig != null && dConfig.ExpeditionType > 0)
                            {
                                value = "ExpeditionType" + dConfig.ExpeditionType.ToString();
                                <option value="@dConfig.ExpeditionType">@localizer[value]</option>
                            }
                            @foreach (ExpeditionTypeElement e in Model.ExpeditionTypes.Where(x => (dConfig == null || x.ExpeditionType != dConfig.ExpeditionType)))
                            {
                                value = "ExpeditionType" + e.ExpeditionType.ToString();
                                <option value="@e.ExpeditionType">@localizer[value]</option>
                            }
                        </select>
                    </td>
                </tr>
                <tr>
                    @if (dConfig != null)
                    {
                        value = dConfig.MaxProdDate;
                        if (dConfig.SuportType != null)
                        {
                            suportType = dConfig.SuportType;
                        }
                        else
                        {
                                suportType = 0;
                        }
                    }
                    else
                    {
                        value = "dd/mm/yyyy";
                        suportType = 0;
                    }
                    <th>@localizer["MaxProdDate"]</th>
                    <td>
                        <input @disable id="dateConfig_MaxProdDate" name="MaxProdDate" onblur="dateConfigValidation(event)" value="@value" style="width: 100%"/>
                        <div style="display: none" id="div_MaxProdDate"><label id="label_MaxProdDate"></label></div>
                        <input @disable style="display: none" id="SuportType" name="SuportType" value="@suportType" />
                    </td>
                </tr>
                @foreach(GenericOptionValue option in Model.SuportTypeList.OptionList)
                {
                    <tr>
                        <th>@TempData[option.GroupCode].ToString()</th>
                        <td>
                            @{
                                OptionValue = Model.SuportTypeList.List.OrderByDescending(x => x.ID).First(x => x.GroupCode == option.GroupCode && (x.ID & suportType) == x.ID);
                                suportType = suportType - OptionValue.ID;
                            }
                            <select @disable name="@option.GroupCode" id="suportType_@option.GroupCode"  style="width: 100%" onchange="suportTypeChange(this)">
                                @foreach (GenericOptionValue e in Model.SuportTypeList.List.Where(x => x.GroupCode == option.GroupCode).OrderByDescending(x => x.ID))
                                {
                                    if ((OptionValue == null && e.ID == 0) || (OptionValue != null && e.ID == OptionValue.ID))
                                    {
                                        <option value="@e.ID" selected>@TempData[e.Code]</option>
                                    }
                                    else
                                    {
                                        <option value="@e.ID">@TempData[e.Code]</option>
                                    }
                                }
                            </select>
                        </td>
                    </tr>
                }
                <tr>
                    @if (dConfig != null)
                    {
                        value = dConfig.ArchCaducityDate;
                    }
                    else
                    {
                        value = "31/12/9999";
                    }
                    <th>@localizer["ArchCaducityDate"]</th>
                    <td>
                        <input @disable id="dateConfig_ArchCaducityDate" name="ArchCaducityDate" onblur="dateConfigValidation(event)" value="@value" style="width: 100%"/>
                        <div style="display: none" id="div_ArchCaducityDate"><label id="label_ArchCaducityDate"></label></div>
                    </td>
                </tr>
                <tr>
                    @if (dConfig != null)
                    {
                        value = dConfig.CaducityDate;
                    }
                    else
                    {
                        value = "31/12/9999";
                    }
                    <th>@localizer["CaducityDate"]</th>
                    <td>
                        <input @disable id="dateConfig_CaducityDate" name="CaducityDate" onblur="dateConfigValidation(event)" value="@value" style="width: 100%"/>
                        <div style="display: none" id="div_CaducityDate"><label id="label_CaducityDate"></label></div>
                   </td>
                </tr>
            }
        </tbody>
        @if (AddDocCode)
        {
        <tfoot id="bootstrap-overrides">
            <tr>
                <td colspan="2">
                    <input type="submit" value="@localizer[submitTag]" name="Submit" class="btn btn-block btn-outline-info" />
                </td>
            </tr>
        </tfoot>
        }
    </table>
</form>
}
@section Scripts
{
    <script type="text/javascript">
        function suportTypeChange(selectElement)
        {
            var suportTypeValue = parseInt(selectElement.value, 10);
            var suportTypeFilteredList = suporTypeList.ValidList.filter(function (value) {
                return (suportTypeValue == 0 || (value & suportTypeValue) == suportTypeValue);
            });
            const selectElements = document.querySelectorAll('select[id^="suportType_"]');
            selectElements.forEach(sElement => {
                if (sElement.id != selectElement.id)
                {
                    var newSPValue = parseInt(sElement.value, 10) + suportTypeValue;
                    var result = suportTypeFilteredList.filter(function (value) {
                        return (parseInt(sElement.value, 10) == 0 || (value & newSPValue) == newSPValue);
                    });
                    if (result.length > 0 || parseInt(sElement.value, 10) == 0)
                    {
                        suportTypeValue += parseInt(sElement.value, 10);
                        suportTypeFilteredList = result.length > 0 ? result : suportTypeFilteredList;
                    }
                    else
                    {
                        let selectedIndex = -1; // initialize to -1 in case the value is not found

                        for (let i = 0; i < sElement.options.length; i++) {
                            newSPValue = parseInt(sElement.options[i].value, 10) + suportTypeValue;
                            result = suportTypeFilteredList.filter(function (value) {
                                return (parseInt(sElement.options[i].value, 10) == 0 || (value & newSPValue) == newSPValue);
                            });
                            if (result.length > 0 || parseInt(sElement.options[i].value, 10) == 0) {
                                selectedIndex = i;
                                suportTypeValue += parseInt(sElement.options[i].value, 10);
                                suportTypeFilteredList = result.length > 0 ? result : suportTypeFilteredList;

                                break;
                            }
                        }
                        sElement.selectedIndex = selectedIndex;
                    }
                }
            });
            const suportTypeElement = document.getElementById("SuportType");
            suportTypeElement.value = suportTypeValue.toString();
        }
        function dateConfigValidation(event) {
            var input = event.target; // get the input element that triggered the event
            const label = document.getElementById(input.id.replace("dateConfig_","label_"));
            const divLabel = document.getElementById(input.id.replace("dateConfig_","div_"));
            divLabel.style.display = "none";
            label.textContent = "";

            let dateString = "";
            let invalidDateString = "";
            const dateValues = input.value.split(";");
            dateValues.forEach(dValue => {
                let newDate = dValue.trim();
                if (newDate.length != 0) {
                    newDate = dateConfigVal(newDate);
                    if (newDate.length == 0) {
                        if (invalidDateString.length == 0)
                            invalidDateString = dValue.trim();
                        else
                            invalidDateString = invalidDateString + ";" + dValue.trim();
                    }
                    else if (dateString.length == 0)
                        dateString = newDate;
                    else
                        dateString = dateString + ";" + newDate;
                }
            });
            if (dateString.length > 0)
            {
                const dValues = dateString.split(";");
                const distinctList = [...new Set(dValues)];
                dateString = distinctList.join(";");
            }
            input.value = dateString;
            if (invalidDateString.length > 0)
            {
                label.textContent = invalidDateStr + ": " + invalidDateString;
                divLabel.style.display = "";
                input.focus();
            }
        }
        function dateConfigVal(dateStr)
        {
            let remaneDate = dateStr.trim().toLowerCase();

            let workingDay = "";
            let workingDayFlag = remaneDate.indexOf("wd");
            if (workingDayFlag == 0) {
                remaneDate = remaneDate.slice(workingDayFlag + 2);
                let i = remaneDate.indexOf(" ");
                if (i == 0 || i == 1)
                {
                    if (i == 1)
                    {
                        if (remaneDate.substring(0, 1) != "+" && remaneDate.substring(0, 1) != "-")
                            return "";
                        else
                            workingDay = remaneDate.substring(0, 1);
                    }
                    else
                        workingDay = "-";
                    remaneDate = remaneDate.slice(i + 1).trim();
                }
                else return "";
            }

            let weekDayFlag = remaneDate.indexOf("ww");
            let weekDay = -1;
            if (weekDayFlag == 0) 
            {
                remaneDate = remaneDate.slice(weekDayFlag + 2);
                let i = remaneDate.indexOf(" ");
                if (i == 1) {
                    weekDay = parseInt(remaneDate.substring(0, 1), 10);
                    if (!(weekDay >= 0 && weekDay <= 6))
                        return "";
                    remaneDate = remaneDate.slice(i).trim();
                }
                else return "";
            }
            let day = "dd";
            let month = "mm";
            let year = "yyyy";

            let end = remaneDate.indexOf('/');
            if (end >= 0) 
            {
                day = remaneDate.substring(0, end).trim();

                remaneDate = remaneDate.slice(end + 1).trim();
                end = remaneDate.indexOf('/');
                if (end < 0) 
                    return "";

                month = remaneDate.substring(0, end).trim();

                year = remaneDate.slice(end + 1).trim();

                // Dia
                start = day.indexOf("+");
                if (start > 0 && day.substring(0,start).trim() == "dd") {
                    let nDay = parseInt(day.slice(start + 1), 10);
                    if (nDay > 0)
                    {
                        day = "dd+" + nDay.toString();
                    }
                    else
                        return "";
                }
                else if (start >= 0)
                    return "";
                else if (day != "dd") {
                    let nDay = parseInt(day, 10);
                    if (nDay > 0)
                    {
                        day = nDay.toString();
                    }
                    else
                        return "";
                }

                // Mês
                start = month.indexOf("+");
                if (start > 0 && month.substring(0, start).trim() == "mm") {
                    let nMonth = parseInt(month.slice(start + 1), 10);
                    if (nMonth > 0) {
                        month = "mm+" + nMonth.toString();
                    }
                    else
                        return "";
                }
                else if (start >= 0)
                    return "";
                else if (month != "mm") {
                    let nMonth = parseInt(month, 10);
                    if (nMonth > 0) {
                        month = nMonth.toString();
                    }
                    else
                        return "";
                }

                // Ano
                start = year.indexOf("+");
                if (start > 0 && year.substring(0, start).trim() == "yyyy") {
                    let nYear = parseInt(year.slice(start + 1), 10);
                    if (nYear > 0) {
                        year = "yyyy+" + nYear.toString();
                    }
                    else
                        return "";
                }
                else if (start >= 0)
                    return "";
                else if (year != "yyyy") {
                    let nYear = parseInt(year, 10);
                    if (nYear > 0) {
                        year = nYear.toString();
                    }
                    else
                        return "";
                }
            }

            remaneDate = "";
            if (workingDayFlag == 0)
                remaneDate += "wd" + workingDay + " ";

            if (weekDayFlag == 0 && weekDay >= 0)
                remaneDate += "ww" + weekDay.toString() + " ";

            remaneDate += day + "/" + month + "/" + year;
            return (remaneDate);
        }
    </script>
}