@using Shared.Models.Areas.evolDP
@using Shared.ViewModels.Areas.evolDP
@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Mvc.Localization
@using System.Globalization;
@inject IViewLocalizer localizer
@inject IConfiguration configuration

@model ServiceCompanyConfigViewModel;
@{
    int colWidth;
    string siteURL = configuration.GetValue<string>("evolUXSiteURL");
    bool AddServiceCompany = false;
    bool AddServiceTask = false;
    bool DeleteServiceTask = false;
    bool ExportServiceTask = false;
    bool AddServiceCompanyExpCodes = false;
    bool AddExpCode = false;
    bool DeleteExpCode = false;
    bool ExportExpCode = false;

    if (Model.Permissions.Find(x => x == "AddServiceCompanyExpCodes") != null) { AddServiceCompanyExpCodes = true; }
    if (Model.Permissions.Find(x => x == "AddServiceCompany") != null) { AddServiceCompany = true; }
    if (Model.Permissions.Find(x => x == "AddServiceTask") != null) { AddServiceTask = true; }
    if (Model.Permissions.Find(x => x == "DeleteServiceTask") != null) { DeleteServiceTask = true; }
    if (Model.Permissions.Find(x => x == "ExportServiceTask") != null) { ExportServiceTask = true; }
    if (Model.Permissions.Find(x => x == "AddExpCode") != null) { AddExpCode = true; }
    if (Model.Permissions.Find(x => x == "DeleteExpCode") != null) { DeleteExpCode = true; }
    if (Model.Permissions.Find(x => x == "ExportExpCode") != null) { ExportExpCode = true; }

    CultureInfo culture = CultureInfo.CurrentCulture;
    string decimalSeparator = culture.NumberFormat.NumberDecimalSeparator;
}
@if (Model == null || Model.Configs == null || Model.Configs.Count() == 0)
{
    <tr><td colspan="5" class="text-center">@localizer["NoModelData"]</td></tr>
}
else
{
    DateTime startDateDT;
    string startDateDesc = "";

    Company serviceCompany = Model.ServiceCompany;
    string serviceTypeDesc = Model.Configs.First().ServiceTypeDesc;
    int serviceTypeID = Model.Configs.First().ServiceTypeID;
    List<ServiceElement> servicesNotInList = new List<ServiceElement>();
    if (Model.Services == null)
        Model.Services = servicesNotInList; ;

    string value = "";
    int level0 = 0, level1 = 0;
    string idValue = "arrow" + level0.ToString();
    string nameValue = "";
    string headerDesc1 = Model.Configs.First().ServiceTypeDesc;
    string headerDesc2 = "";
    string headerDesc3 = "";
    string doubleStr;
    if (Model.ServiceID > 0)
    {
        headerDesc2 = localizer["Service"].Value + ": " + Model.Configs.First().ServiceDesc;
        value = "ServiceType|" + Model.ServiceID.ToString();
        headerDesc3 = localizer["MatchCode"].Value + ": [" + Model.Configs.First().MatchCode + "]";
    }    
    if (Model.CostDate > 0)
    {
        startDateDesc = Model.CostDate.ToString();
        if (DateTime.TryParseExact(startDateDesc, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out startDateDT))
            startDateDesc = startDateDT.ToShortDateString();
        headerDesc2 += " / " + startDateDesc;
    }

    string startDisplay = "";
    if (Model.ServiceID == 0)
        startDisplay = "display: none";
    if (Model.Services != null)
    {
        if (Model.ServiceID == 0)
        {
            foreach (ServiceElement s in Model.Services.Where(x => x.ServiceTypeID == serviceTypeID).ToList())
            {
                if (Model.Configs.Where(x => x.ServiceID == s.ServiceID).Count() == 0)
                    servicesNotInList.Add(s);
            }
        }
    }
    <div id="TitlePage">
        <h1>@localizer["ServiceCompanyConfig"] @serviceCompany.CompanyName</h1>
        <h2>@headerDesc1</h2>
    </div>
    <div>
        <a class='bx bx-left-arrow grow_01' style="color:rgb(90 205 239)" asp-area="evolDP" asp-controller="ServiceProvision" asp-action="ServiceCompany"
            asp-route-servicecompanyjson="@JsonConvert.SerializeObject(Model.ServiceCompany)">
        </a>
    </div>
    <div id ="TitlePage">
    @if (!string.IsNullOrEmpty(headerDesc2))
    {
        <h2>@headerDesc2
            @if (AddServiceCompany && Model.CostDate == 0 && servicesNotInList.Count() > 0)
            {
                    <img onclick="openPopupAdd1()" class="evol-image grow" src="~/images/add.png" title="@localizer["ServiceCompanyConfigAdd"]" />
            }
        </h2>
        @if(!string.IsNullOrEmpty(headerDesc3))
        {
        <h3>@headerDesc3</h3>
        }
    }
    </div>
    if (servicesNotInList.Count() > 0)
    {
        <div class="popup-container" id="confirmPopupAdd1" style="display: none;">
            <div class="bgGradient">
                <div class="popup">
                    <form class="align-content-center FormEdit" asp-area="evolDP" asp-controller="ServiceProvision" asp-action="ConfigServiceCompanyConfig"
                       asp-route-pagecostdate="@Model.CostDate" asp-route-pageservicetypeid="@Model.Configs.First().ServiceTypeID" asp-route-pageserviceid="@Model.ServiceID"
                       asp-route-servicecompany="@JsonConvert.SerializeObject(Model.ServiceCompany)">
                        <h1>@localizer["PopupMessageAdd"]</h1>
                        <div class="form-inputs">
                            <h6>@localizer["Service"]</h6>
                            <select id="ServiceID" name="ServiceID">
                                @foreach (ServiceElement s in servicesNotInList)
                                {
                                    <option value="@s.ServiceID">@s.ServiceDesc</option>
                                }
                            </select>
                            @{
                                startDateDesc = DateTime.Now.ToShortDateString();
                            }
                            <h6>@localizer["CostDate"]</h6>
                            <input id="CostDate" name="CostDate" type="date" value="@startDateDesc" />
                            <h6>@localizer["ServiceCost"]</h6>
                            <input type="number" min="0" max="1000000" step="0.01" id="ServiceCost" name="ServiceCost" value="0" />
                            <h6>@localizer["Formula"]</h6>
                            <input type="text" id="Formula" name="Formula" maxlength="1000" value="" />
                        </div>
                        <div class="popup-buttons">
                            <button class="popup-button" id="confirmEdit" name="Submit" onclick="return confirmBtn()" value="@localizer["SubmitChange"]">Confirmar</button>
                            <button class="popup-button" onclick="return closePopup()">Cancelar</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    }
    @foreach (var service in Model.Configs.Select(x => x.ServiceID).Distinct().ToList())
    {
        string serviceDesc = Model.Configs.First(x => x.ServiceID == service).ServiceDesc;
        string matchCode = localizer["MatchCode"].Value + ": " + Model.Configs.First(x => x.ServiceID == service).MatchCode;
        value = "Service|" + service.ToString();
        level0++;
        nameValue = "level0|" + level0.ToString();
        idValue = "arrow" + nameValue;
        if (Model.ServiceID == 0)
        {
            <div id ="TitlePage">
                <h2>
                @serviceDesc
                    <img onclick="openPopupAdd2('@value')" class="evol-image grow" src="~/images/add.png" title="@localizer["ServiceCompanyConfigAdd"]" />
                </h2>
                <h3>
                    [@matchCode]
                    <a class="evol-arrow bx bxs-chevron-down grow" href="javascript:showDetail('@nameValue')" id="@idValue"></a>
                </h3>
            </div>
        }
        @if (AddServiceCompany && Model.CostDate == 0 && Model.ServiceID == 0)
        {
            <div class="popup-container confirmPopupAdd2 FormEdit" id="Add|@value" style="display: none;">
                <div class="bgGradient">
                    <div class="popup">
                        <form class="align-content-center FormEdit" asp-area="evolDP" asp-controller="ServiceProvision" asp-action="ConfigServiceCompanyConfig"
                  asp-route-pagecostdate="@Model.CostDate" asp-route-pageservicetypeid="@Model.Configs.First().ServiceTypeID" asp-route-pageserviceid="@Model.ServiceID"
                  asp-route-servicecompany="@JsonConvert.SerializeObject(Model.ServiceCompany)">
                            <h1>@localizer["PopupMessageAdd"]</h1>
                            <div class="form-inputs">
                                <input style="display: none" id="ServiceID" name="ServiceID" type="text" value="@service" />
                                <h6>@localizer["Service"]</h6>
                                <input id="Service" name="Service" type="text" value="@serviceDesc" readonly/>
                                <h6>@localizer["CostDate"]</h6>
                                <input id="CostDate" name="CostDate" type="date" value="@startDateDesc" />
                                <h6>@localizer["ServiceCost"]</h6>
                                <input type="number" min="0" max="1000000" step="0.01" id="ServiceCost" name="ServiceCost" value="0" />
                                <h6>@localizer["Formula"]</h6>
                                <input type="text" id="Formula" name="Formula" maxlength="1000" value="" />
                            </div>
                            <div class="popup-buttons">
                                <button class="popup-button" id="confirmEdit" name="Submit" onclick="return confirmBtn()" value="@localizer["SubmitChange"]">Confirmar</button>
                                <button type="button" class="popup-button" onclick="return closePopup()">Cancelar</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        }
        <table id="@nameValue" style="@startDisplay" class="table table-sm table-hover table-collapse-seperate">
        <thead id="bootstrap-overrides" class="table-info sticky-header">
            <tr>
                @if(AddServiceCompany)
                {
                <th class ="evol-fitcontent-column"></th>
                }
                <th>@localizer["CostDate"]</th>
                <th>@localizer["ServiceCost"]</th>
                <th>@localizer["Formula"]</th>
            </tr>
        </thead>
        <tbody  id="bootstrap-overrides">
        @foreach (var cDate in Model.Configs.Where(x => x.ServiceID == service).Distinct().ToList())
        {
            startDateDesc = cDate.CostDate.ToString();
            if (DateTime.TryParseExact(startDateDesc, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out startDateDT))
                startDateDesc = startDateDT.ToShortDateString();

            value = "S" + cDate.ServiceID.ToString() + "|" + cDate.CostDate.ToString();
                    <tr id="Show|@value" ondblclick="openPopupEdit('@value')">
                @if (AddServiceCompany)
                {
                    <td class ="evol-fitcontent-column borders">
                        <img onclick="openPopupEdit('@value')" class="evol-image wobble" src="~/images/edit.png" title="@localizer["ChangeServiceCompanyConfig"]"/>
                    </td>
                }
                <td>@startDateDesc</td>
                <td>@cDate.ServiceCost</td>
                <td>@cDate.Formula</td>
            </tr>
            @if (AddServiceCompany)
            {
                        <div class="popup-container confirmPopupEdit FormEdit" id="Edit|@value" style="display: none;">
                            <div class="bgGradient">
                                <div class="popup">
                                    <form class="align-content-center FormEdit" asp-area="evolDP" asp-controller="ServiceProvision" asp-action="ConfigServiceCompanyConfig"
                                       asp-route-pagecostdate="@Model.CostDate" asp-route-pageservicetypeid="@Model.Configs.First().ServiceTypeID" asp-route-pageserviceid="@Model.ServiceID"
                                       asp-route-servicecompany="@JsonConvert.SerializeObject(Model.ServiceCompany)">
                                        <h1>@localizer["PopupMessageEdit"]</h1>
                                        <div class="form-inputs">
                                            <input style="display: none" id="ServiceID" name="ServiceID" type="text" value="@cDate.ServiceID" />
                                            <h6>@localizer["Service"]</h6>
                                            <input id="Service" name="Service" type="text" value="@serviceDesc" readonly />
                                            <h6>@localizer["CostDate"]</h6>
                                            <input style="display: none" id="CostDate" name="CostDate" type="text" value="@cDate.CostDate" />
                                            <input id="CostDateView" name="CostDateView" type="text" value="@startDateDesc" readonly />
                                            @{
                                                doubleStr = cDate.ServiceCost.ToString("F2");
                                                if (decimalSeparator == ",")
                                                    doubleStr = doubleStr.Replace(",", ".");
                                            }
                                            <h6>@localizer["ServiceCost"]</h6>
                                            <input type="number" min="0" max="1000000" step="0.01" id="ServiceCost" name="ServiceCost" value="@doubleStr" />
                                            <h6>@localizer["Formula"]</h6>
                                            <input type="text" id="Formula" name="Formula" maxlength="1000" value="@cDate.Formula" />
                                        </div>
                                        <div class="popup-buttons">
                                            <button class="popup-button" id="confirmEdit" name="Submit" onclick="return confirmBtn()" value="@localizer["SubmitChange"]">Confirmar</button>
                                            <button type="button" class="popup-button" onclick="return closePopup()">Cancelar</button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        </div>
            }
        }
        </tbody>
    </table>
    }
    <script>
        var count = @servicesNotInList.Count();
        var date = @startDateDesc;
    </script>
}
@section Scripts
    {
    <script type="text/javascript">
        function RegistModeChange() {
            var checkbox = document.getElementById("RegistMode");
            chkElements = document.querySelectorAll('input[id^="checkedDRFlag"]');
            chkElements.forEach(tElement => {
                tElement.checked = checkbox.checked;
            });
        }
        function openPopupEdit(value) {
            document.getElementById("Edit|" + value).style.display = "flex";
        }
        function openPopupAdd1() {
            document.getElementById("CostDate").value = date;
            document.getElementById("ServiceCost").value = "0";
            document.getElementById("Formula").value = "";
            document.getElementById("confirmPopupAdd1").style.display = "flex";
        }
        function openPopupAdd2(value) {
            document.getElementById("Add|" + value).style.display = "flex";
        }
        function confirmBtn() {
            return true;
        }
        function closePopup() {
            if (count > 0) 
            {
                document.getElementById("confirmPopupAdd1").style.display = "none";
            }
            var elements = document.querySelectorAll(".confirmPopupAdd2");
            for (var i = 0; i < elements.length; i++) {
                elements[i].style.display = "none";
            }
            var elements = document.querySelectorAll(".confirmPopupEdit");
            for (var i = 0; i < elements.length; i++) {
                elements[i].style.display = "none";
            }
            return false;
        }
    </script>
}