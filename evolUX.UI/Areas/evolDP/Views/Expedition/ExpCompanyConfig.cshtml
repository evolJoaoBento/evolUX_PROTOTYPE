@using Shared.Models.Areas.evolDP
@using Shared.ViewModels.Areas.evolDP
@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Mvc.Localization
@using System.Globalization;
@inject IViewLocalizer localizer
@inject IConfiguration configuration

@model ExpCompanyConfigViewModel;
@{
    string siteURL = configuration.GetValue<string>("evolUXSiteURL");
    bool AddExpCompany = false;
    bool AddExpeditionContract = false;
    bool DeleteExpeditionContract = false;
    bool ExportExpeditionContract = false;
    bool AddExpeditionType = false;
    bool AddExpRegistRange = false;
    bool ExportExpRegistRange = false;

    if (Model.Permissions.Find(x => x == "AddExpeditionType") != null) { AddExpeditionType = true; }
    if (Model.Permissions.Find(x => x == "AddExpCompany") != null) { AddExpCompany = true; }
    if (Model.Permissions.Find(x => x == "AddExpeditionContract") != null) { AddExpeditionContract = true; }
    if (Model.Permissions.Find(x => x == "DeleteExpeditionContract") != null) { DeleteExpeditionContract = true; }
    if (Model.Permissions.Find(x => x == "ExportExpeditionContract") != null) { ExportExpeditionContract = true; }
    if (Model.Permissions.Find(x => x == "AddExpRegistRange") != null) { AddExpRegistRange = true; }
    if (Model.Permissions.Find(x => x == "ExportExpRegistRange") != null) { ExportExpRegistRange = true; }
    string emptyExpColumnFDesc = localizer["EmptyExpColumnF"].Value;

    CultureInfo culture = CultureInfo.CurrentCulture;
    string decimalSeparator = culture.NumberFormat.NumberDecimalSeparator;

    string emptyEmptyMaxWeight = localizer["EmptyMaxWeight"].Value;
}
@if (Model == null || Model.Configs == null || Model.Configs.Count() == 0)
{
    <tr><td colspan="5" class="text-center">@localizer["NoModelData"]</td></tr>
}
else
{
    DateTime startDateDT;
    string startDateDesc = Model.Configs.First().StartDate.ToString();
    if (DateTime.TryParseExact(startDateDesc, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out startDateDT))
        startDateDesc = startDateDT.ToShortDateString();

    Company expCompany = Model.ExpCompany;
    List<ExpeditionZoneElement> zonesNotInList = new List<ExpeditionZoneElement>();
    string value = "";
    int level0 = 0, level1 = 0;
    string idValue = "arrow" + level0.ToString();
    string nameValue = "";
    string headerDesc1 = expCompany.CompanyName + " - " + localizer["StartDate"].Value + " " + startDateDesc;
    string headerDesc2 = "";
    string doubleStr;
    if (Model.ExpeditionType > 0)
    {
        headerDesc2 = Model.Configs.First().ExpeditionTypeDesc;
        value = "Zone|" + Model.ExpeditionType.ToString();
    }
    if (Model.ExpeditionZone > 0)
        headerDesc2 += " / " + Model.Configs.First().ExpeditionZoneDesc;

    string startDisplay = "";
    if (Model.ExpeditionZone == 0)
        startDisplay = "display: none";
    if (Model.Zones != null)
    {
        foreach (ExpeditionZoneElement z in Model.Zones)
        {
            if (Model.Configs.Where(x => x.ExpeditionZone == z.ExpeditionZone).Count() == 0)
                zonesNotInList.Add(z);
        }
    }
    <div id="TitlePage">
        <h1>@localizer["ExpCompanyConfig"]</h1>
        <h2>@headerDesc1</h2>
    </div>
    <div>
        <a class='bx bx-left-arrow grow_01' style="color:rgb(90 205 239)" asp-area="evolDP" asp-controller="Expedition" asp-action="ExpCompany"
            asp-route-expcompanyJson="@JsonConvert.SerializeObject(Model.ExpCompany)">
        </a>
    </div>
    <div id ="TitlePage">
    @if (!string.IsNullOrEmpty(headerDesc2))
    {
        <h2>@headerDesc2
            @if (Model.ExpeditionType != 0 && AddExpeditionType && Model.ExpeditionZone == 0)
            {
                    <img onclick="openPopupAdd('@value')" class="evol-image grow" src="~/images/add.png" title="@localizer["ExpCompanyConfigAdd"]" />
            }
        </h2>
    }
    </div>
    @foreach (var type in Model.Configs.Select(x => new { x.ExpeditionType,x.ExpeditionTypeDesc}).Distinct().ToList())
    {
    @foreach (var zone in Model.Configs.Select(x => new {x.ExpeditionZone, x.ExpeditionZoneDesc}).Distinct().ToList())
    {   value = "Zone|" + type.ExpeditionType.ToString();
        if (Model.ExpeditionType != 0)
        {
            @if (AddExpeditionType && Model.ExpeditionZone == 0)
            {
                    <div class="popup-container confirmPopupAdd FormEdit" id="Add|@value" style="display: none;">
                        <div class="bgGradient">
                            <div class="popup">
                                <form class="align-content-center FormEdit" asp-area="evolDP" asp-controller="Expedition" asp-action="ConfigExpCompanyConfig"
                  asp-route-startdate="@Model.Configs.First().StartDate" asp-route-pageexpeditiontype="@Model.ExpeditionType" asp-route-pageexpeditionZone="@Model.ExpeditionZone"
                  asp-route-expcompanyJson="@JsonConvert.SerializeObject(Model.ExpCompany)">
                                    <h1>@localizer["PopupMessageAdd"]</h1>
                                    <div class="form-inputs">
                                        <input style="display: none" id="ExpCompanyID" name="ExpCompanyID" type="text" value="@Model.ExpCompany.ID" />
                                        <input style="display: none" id="StartDate" name="StartDate" type="text" value="@startDateDesc" />
                                        <input style="display: none" id="ExpeditionType" name="ExpeditionType" type="text" value="@type.ExpeditionType" />
                                        <div class="popup-div">
                                            <h6>@localizer["ExpeditionType"]</h6>
                                            <h6>@localizer["ExpeditionZone"]</h6>
                                        </div>
                                        <div class="popup-div">
                                            <input id="ExpeditionTypeDesc" name="ExpeditionTypeDesc" type="text" value="@type.ExpeditionTypeDesc" readonly />
                                            <select id="ExpeditionZone" name="ExpeditionZone">
                                                @foreach (ExpeditionZoneElement z in zonesNotInList)
                                                {
                                                    <option value="@z.ExpeditionZone">@z.ExpeditionZoneDesc</option>
                                                }
                                            </select>
                                        </div>
                                        <div class="popup-div">
                                            <h6>@localizer["ExpCompanyLevel"]</h6>
                                            <h6>@localizer["MaxWeight"]</h6>
                                        </div>
                                        <div class="popup-div">
                                            <input type="number" min="0" max="1000000" id="Scale" name="Scale" value="" readonly />
                                            <input type="number" min="0" max="1000000" id="MaxWeight" name="MaxWeight" value="0" />
                                        </div>
                                        <div class="popup-div">
                                            <h6>@localizer["UnitCost"]</h6>
                                            <h6>@localizer["ExpColumnA"]</h6>
                                        </div>
                                        <div class="popup-div">
                                            <input type="number" min="0" max="1000000" step="0.01" id="UnitCost" name="UnitCost" value="0" />
                                            <input type="text" id="ExpColumnA" name="ExpColumnA" maxlength="10" value="" />
                                        </div>
                                        <div class="popup-div">
                                            <h6>@localizer["ExpColumnB"]</h6>
                                            <h6>@localizer["ExpColumnE"]</h6>
                                        </div>
                                        <div class="popup-div">
                                            <input type="text" id="ExpColumnB" name="ExpColumnB" maxlength="10" value="" />
                                            <input type="text" id="ExpColumnE" name="ExpColumnE" maxlength="10" value="" />
                                        </div>
                                        <div class="popup-div">
                                            <h6>@localizer["ExpColumnI"]</h6>
                                            <h6>@localizer["ExpColumnF"]</h6>
                                        </div>
                                        <div class="popup-div">
                                            <input type="text" id="ExpColumnI" name="ExpColumnI" maxlength="10" value="" />
                                            <input type="text" id="ExpColumnF" name="ExpColumnF" maxlength="10" value="" />
                                        </div>
                                    </div>
                                    <div class="popup-buttons">
                                        <button class="popup-button" id="confirmEdit" name="Submit" onclick="return confirmBtn()" value="@localizer["SubmitChange"]">Confirmar</button>
                                        <button class="popup-button" onclick="return closePopup()">Cancelar</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
            }
        }
        level0++;
        nameValue = "level0|" + level0.ToString();
        idValue = "arrow" + nameValue;
        if (Model.ExpeditionZone ==  0)
        {
        <div id ="TitlePage">
            <h3>@type.ExpeditionTypeDesc - @zone.ExpeditionZoneDesc
                        <a class="evol-arrow bx bxs-chevron-down grow" href="javascript:showDetail('@nameValue')" id="@idValue"></a>
            </h3>
        </div>
        }
        <table id="@nameValue" style="@startDisplay; padding-right:20px" class="table table-sm table-hover table-collapse-seperate">
        <thead id="bootstrap-overrides" class="table-info sticky-header">
            <tr>
                @if(AddExpeditionType)
                {
                <th class ="evol-fitcontent-column"></th>
                }
                <th>@localizer["ExpeditionType"]</th>
                <th>@localizer["ExpeditionZone"]</th>
                <th>@localizer["ExpCompanyLevel"]</th>
                <th>@localizer["MaxWeight"]</th>
                <th>@localizer["UnitCost"]</th>
                <th>@localizer["ExpColumnA"]</th>
                <th>@localizer["ExpColumnB"]</th>
                <th>@localizer["ExpColumnE"]</th>
                <th>@localizer["ExpColumnI"]</th>
                <th>@localizer["ExpColumnF"]</th>
            </tr>
        </thead>
        <tbody  id="bootstrap-overrides">
        @foreach(var t in Model.Configs.Where(x=> x.ExpeditionType == type.ExpeditionType && x.ExpeditionZone == zone.ExpeditionZone))
        {
            value = t.ExpeditionType.ToString() + "|" + t.ExpeditionZone.ToString() + "|" + t.ExpCompanyLevel.ToString();
            <tr id="Show|@value" ondblclick="openPopupEdit('@value')">
                @if (AddExpeditionType)
                {
                    <td class ="borders">
                        <img onclick="openPopupEdit('@value')" class="evol-image wobble" src="~/images/edit.png" title="@localizer["ChangeExpCompanyConfig"]"/>
                    </td>
                }
                <td>@type.ExpeditionTypeDesc</td>
                <td>@zone.ExpeditionZoneDesc</td>
                <td>@t.ExpCompanyLevel</td>
                <td>
                    @if (t.MaxWeight == null)
                    {
                        @emptyEmptyMaxWeight
                    }
                    else
                    {
                        @string.Format("{0} g", t.MaxWeight)
                    }
                </td>
                <td>@t.UnitCost</td>
                <td>@t.ExpColumnA</td>
                <td>@t.ExpColumnB</td>
                <td>@t.ExpColumnE</td>
                <td>@t.ExpColumnI</td>
                <td>
                    @if (string.IsNullOrEmpty(t.ExpColumnF))
                    {
                        @emptyExpColumnFDesc
                    }
                    else
                    {
                        @t.ExpColumnF
                    }
                </td>
            </tr>
            @if (AddExpeditionType)
            {
                            <div class="popup-container confirmPopupEdit FormEdit" id="Edit|@value" style="display: none;">
                                <div class="bgGradient">
                                    <div class="popup">
                                        <form class="align-content-center FormEdit" asp-area="evolDP" asp-controller="Expedition" asp-action="ConfigExpCompanyConfig"
                          asp-route-startdate="@Model.Configs.First().StartDate" asp-route-pageexpeditiontype="@Model.ExpeditionType" asp-route-pageexpeditionZone="@Model.ExpeditionZone"
                          asp-route-expcompanyJson="@JsonConvert.SerializeObject(Model.ExpCompany)">
                                            <h1>@localizer["PopupMessageEdit"]</h1>
                                            <div class="form-inputs">
                                                <input style="display: none" id="ExpCompanyID" name="ExpCompanyID" type="text" value="@t.ExpCompanyID" />
                                                <input style="display: none" id="ExpeditionType" name="ExpeditionType" type="text" value="@t.ExpeditionType" />
                                                <input style="display: none" id="ExpeditionZone" name="ExpeditionZone" type="text" value="@t.ExpeditionZone" />
                                                <div class="popup-div">
                                                    <h6>@localizer["ExpeditionType"]</h6>
                                                    <h6>@localizer["ExpeditionZone"]</h6>
                                                </div>
                                                <div class="popup-div">
                                                    <input id="ExpeditionTypeDesc" name="ExpeditionTypeDesc" type="text" value="@t.ExpeditionTypeDesc" readonly />
                                                    <input id="ExpeditionZoneDesc" name="ExpeditionZoneDesc" type="text" value="@t.ExpeditionZoneDesc" readonly />
                                                </div>
                                                <div class="popup-div">
                                                    <h6>@localizer["ExpCompanyLevel"]</h6>
                                                    <h6>@localizer["MaxWeight"] (g)</h6>
                                                </div>
                                                <div class="popup-div">
                                                    <input id="ExpCompanyLevel" name="ExpCompanyLevel" type="text" value="@t.ExpCompanyLevel" />
                                                    <input type="number" min="0" max="1000000" id="MaxWeight" name="MaxWeight" value="@t.MaxWeight" />
                                                </div>
                                                <div class="popup-div">
                                                    <h6>@localizer["UnitCost"]</h6>
                                                    <h6>@localizer["ExpColumnA"]</h6>
                                                </div>
                                                <div class="popup-div">
                                                    @{
                                                        doubleStr = t.UnitCost.ToString("F2");
                                                        if (decimalSeparator == ",")
                                                            doubleStr = doubleStr.Replace(",", ".");
                                                    }
                                                    <input type="number" min="0" max="1000000" step="0.01" id="UnitCost" name="UnitCost" value="@doubleStr" />
                                                    <input type="text" id="ExpColumnA" name="ExpColumnA" maxlength="10" value="@t.ExpColumnA" />
                                                </div>
                                                <div class="popup-div">
                                                    <h6>@localizer["ExpColumnB"]</h6>
                                                    <h6>@localizer["ExpColumnE"]</h6>
                                                </div>
                                                <div class="popup-div">
                                                    <input type="text" id="ExpColumnB" name="ExpColumnB" maxlength="10" value="@t.ExpColumnB" />
                                                    <input type="text" id="ExpColumnE" name="ExpColumnE" maxlength="10" value="@t.ExpColumnE" />
                                                </div>
                                                <div class="popup-div">
                                                    <h6>@localizer["ExpColumnI"]</h6>
                                                    <h6>@localizer["ExpColumnF"]</h6>
                                                </div>
                                                <div class="popup-div">
                                                    <input type="text" id="ExpColumnI" name="ExpColumnI" maxlength="10" value="@t.ExpColumnI" />
                                                    <input type="text" id="ExpColumnF" name="ExpColumnF" maxlength="10" value="@t.ExpColumnF" />
                                                </div>
                                            </div>
                                            <div class="popup-buttons">
                                                <button class="popup-button" id="confirmEdit" name="Submit" onclick="return confirmBtn()" value="@localizer["SubmitChange"]">Confirmar</button>
                                                <button class="popup-button" onclick="return closePopup()">Cancelar</button>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
            }
        }
        </tbody>
    </table>
    }
    }
}
@section Scripts
    {
    <script type="text/javascript">
        function RegistModeChange() {
            var checkbox = document.getElementById("RegistMode");
            chkElements = document.querySelectorAll('input[id^="checkedDRFlag"]');
            chkElements.forEach(tElement => {
                tElement.checked = checkbox.checked;
            });
        }
        function openPopupAdd(value) {
            document.getElementById("Add|" + value).style.display = "flex";
        }
        function openPopupEdit(value) {
            document.getElementById("Edit|" + value).style.display = "flex";
        }
        function confirmBtn() {
            return true;
        }
        function closePopup() {
            var elements = document.querySelectorAll(".confirmPopupAdd");
            for (var i = 0; i < elements.length; i++) {
                elements[i].style.display = "none";
            }
            var elements = document.querySelectorAll(".confirmPopupEdit");
            for (var i = 0; i < elements.length; i++) {
                elements[i].style.display = "none";
            }
            return false;
        }
    </script>
}