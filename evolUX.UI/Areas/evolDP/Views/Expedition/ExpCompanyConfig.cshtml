@using Shared.Models.Areas.evolDP
@using Shared.ViewModels.Areas.evolDP
@using Newtonsoft.Json;
@using Microsoft.AspNetCore.Mvc.Localization
@using System.Globalization;
@inject IViewLocalizer localizer
@inject IConfiguration configuration

@model ExpCompanyConfigViewModel;
@{
    string siteURL = configuration.GetValue<string>("evolUXSiteURL");
    bool AddExpCompany = false;
    bool AddExpeditionContract = false;
    bool DeleteExpeditionContract = false;
    bool ExportExpeditionContract = false;
    bool AddExpeditionType = false;
    bool AddExpRegistRange = false;
    bool ExportExpRegistRange = false;

    if (Model.Permissions.Find(x => x == "AddExpeditionType") != null) { AddExpeditionType = true; }
    if (Model.Permissions.Find(x => x == "AddExpCompany") != null) { AddExpCompany = true; }
    if (Model.Permissions.Find(x => x == "AddExpeditionContract") != null) { AddExpeditionContract = true; }
    if (Model.Permissions.Find(x => x == "DeleteExpeditionContract") != null) { DeleteExpeditionContract = true; }
    if (Model.Permissions.Find(x => x == "ExportExpeditionContract") != null) { ExportExpeditionContract = true; }
    if (Model.Permissions.Find(x => x == "AddExpRegistRange") != null) { AddExpRegistRange = true; }
    if (Model.Permissions.Find(x => x == "ExportExpRegistRange") != null) { ExportExpRegistRange = true; }
    string emptyExpColumnFDesc = localizer["EmptyExpColumnF"].Value;

    CultureInfo culture = CultureInfo.CurrentCulture;
    string decimalSeparator = culture.NumberFormat.NumberDecimalSeparator;

    string emptyEmptyMaxWeight = localizer["EmptyMaxWeight"].Value;
}
@if (Model == null || Model.Configs == null || Model.Configs.Count() == 0)
{
    <tr><td colspan="5" class="text-center">@localizer["NoModelData"]</td></tr>
}
else
{
    DateTime startDateDT;
    string startDateDesc = Model.Configs.First().StartDate.ToString();
    if (DateTime.TryParseExact(startDateDesc, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out startDateDT))
        startDateDesc = startDateDT.ToShortDateString();

    Company expCompany = Model.ExpCompany;
    List<ExpeditionZoneElement> zonesNotInList = new List<ExpeditionZoneElement>();
    string value = "";
    int level0 = 0, level1 = 0;
    string idValue = "arrow" + level0.ToString();
    string nameValue = "";
    string headerDesc1 = expCompany.CompanyName + " - " + localizer["StartDate"].Value + " " + startDateDesc;
    string headerDesc2 = "";
    string doubleStr;
    if (Model.ExpeditionType > 0)
    {
        headerDesc2 = Model.Configs.First().ExpeditionTypeDesc;
        value = "Zone|" + Model.ExpeditionType.ToString();
    }
    if (Model.ExpeditionZone > 0)
        headerDesc2 += " / " + Model.Configs.First().ExpeditionZoneDesc;

    string startDisplay = "";
    if (Model.ExpeditionZone == 0)
        startDisplay = "display: none";
    if (Model.Zones != null)
    {
        foreach (ExpeditionZoneElement z in Model.Zones)
        {
            if (Model.Configs.Where(x => x.ExpeditionZone == z.ExpeditionZone).Count() == 0)
                zonesNotInList.Add(z);
        }
    }

    <div id="TitlePage">
        <h1>@localizer["ExpCompanyConfig"]</h1>
        <h2>@headerDesc1</h2>
    </div>
    <div>
        <a class='bx bx-left-arrow grow' style="color:rgb(90 205 239)" asp-area="evolDP" asp-controller="Expedition" asp-action="ExpCompany"
            asp-route-expcompanyJson="@JsonConvert.SerializeObject(Model.ExpCompany)">
        </a>
    </div>
    <div id ="TitlePage">
    @if (!string.IsNullOrEmpty(headerDesc2))
    {
        <h2>@headerDesc2
            @if (Model.ExpeditionType != 0 && AddExpeditionType && Model.ExpeditionZone == 0)
            {
                    <img onclick="EditRow('@value')" class="evol-image grow" src="~/images/add.png" title="@localizer["ExpCompanyConfigAdd"]" />
            }
        </h2>
    }
    </div>
    @foreach (var type in Model.Configs.Select(x => new { x.ExpeditionType,x.ExpeditionTypeDesc}).Distinct().ToList())
    {
    @foreach (var zone in Model.Configs.Select(x => new {x.ExpeditionZone, x.ExpeditionZoneDesc}).Distinct().ToList())
    {   value = "Zone|" + type.ExpeditionType.ToString();
        if (Model.ExpeditionType != 0)
        {
            @if (AddExpeditionType && Model.ExpeditionZone == 0)
            {
            <table id="Hide|@value" style="display: none; padding-right:20px" class="table table-sm table-hover table-collapse-seperate">
                <thead id="bootstrap-overrides" class="table-info sticky-header">
                    <tr>
                        <th class ="evol-fitcontent-column"></th>
                        <th>@localizer["ExpeditionType"]</th>
                        <th>@localizer["ExpeditionZone"]</th>
                        <th>@localizer["ExpCompanyLevel"]</th>
                        <th>@localizer["MaxWeight"]</th>
                        <th>@localizer["UnitCost"]</th>
                        <th>@localizer["ExpColumnA"]</th>
                        <th>@localizer["ExpColumnB"]</th>
                        <th>@localizer["ExpColumnE"]</th>
                        <th>@localizer["ExpColumnI"]</th>
                        <th>@localizer["ExpColumnF"]</th>
                    </tr>
                </thead>
                <tbody id="bootstrap-overrides">
                    <tr>
                        <form id="AddFrm|@value" class="d-flex justify-content-center m-5" asp-area="evolDP" asp-controller="Expedition" asp-action="ConfigExpCompanyConfig"
                                asp-route-startdate="@Model.Configs.First().StartDate" asp-route-pageexpeditiontype="@Model.ExpeditionType" asp-route-pageexpeditionZone="@Model.ExpeditionZone"
                                asp-route-expcompanyJson="@JsonConvert.SerializeObject(Model.ExpCompany)">
                        <td  class="borders" style="align-items:center; display:flex">
                                    <img onclick="CancelRow('@value')" type="image" class="evol-image grow" src="~/images/cancel.png" title="@localizer["Cancel"]" />
                                    <input onclick="return true" type="image" value="@localizer["SubmitChange"]" class="evol-image grow" name="Submit" src="~/images/Ok.png" />
                        </td>
                        <td>
                                @type.ExpeditionTypeDesc
                            <input style="display: none" id="ExpCompanyID" name="ExpCompanyID" type="text" value="@Model.ExpCompany.ID" />
                            <input style="display: none" id="StartDate" name="StartDate" type="text" value="@startDateDesc" />
                            <input style="display: none" id="ExpeditionType" name="ExpeditionType" type="text" value="@type.ExpeditionType" />
                        </td>
                        <td>
                            <select id="ExpeditionZone" name="ExpeditionZone">
                                    @foreach (ExpeditionZoneElement z in zonesNotInList)
                                    {
                                    <option value="@z.ExpeditionZone">@z.ExpeditionZoneDesc</option>
                                    }
                            </select>
                        </td>
                        <td></td>
                        <td><input type="number" min="0" max="1000000" id="MaxWeight" name="MaxWeight" value="0" /></td>
                        <td><input type="number" min="0" max="1000000" step="0.01" id="UnitCost" name="UnitCost" value="0" /></td>
                        <td><input type="text" id="ExpColumnA" name="ExpColumnA" maxlength="10" value="" /></td>
                        <td><input type="text" id="ExpColumnB" name="ExpColumnB" maxlength="10" value="" /></td>
                        <td><input type="text" id="ExpColumnE" name="ExpColumnE" maxlength="10" value="" /></td>
                        <td><input type="text" id="ExpColumnI" name="ExpColumnI" maxlength="10" value="" /></td>
                        <td><input type="text" id="ExpColumnF" name="ExpColumnF" maxlength="10" value="" /></td>
                        </form>
                    </tr>
                </tbody>
            </table>
            }
        }
        level0++;
        nameValue = "level0|" + level0.ToString();
        idValue = "arrow" + nameValue;
        if (Model.ExpeditionZone ==  0)
        {
        <div id ="TitlePage">
            <h3>@type.ExpeditionTypeDesc - @zone.ExpeditionZoneDesc
                        <a class="evol-arrow bx bxs-chevron-down grow" href="javascript:showDetail('@nameValue')" id="@idValue"></a>
            </h3>
        </div>
        }
        <table id="@nameValue" style="@startDisplay; padding-right:20px" class="table table-sm table-hover table-collapse-seperate">
        <thead id="bootstrap-overrides" class="table-info sticky-header">
            <tr>
                @if(AddExpeditionType)
                {
                <th class ="evol-fitcontent-column"></th>
                }
                <th>@localizer["ExpeditionType"]</th>
                <th>@localizer["ExpeditionZone"]</th>
                <th>@localizer["ExpCompanyLevel"]</th>
                <th>@localizer["MaxWeight"]</th>
                <th>@localizer["UnitCost"]</th>
                <th>@localizer["ExpColumnA"]</th>
                <th>@localizer["ExpColumnB"]</th>
                <th>@localizer["ExpColumnE"]</th>
                <th>@localizer["ExpColumnI"]</th>
                <th>@localizer["ExpColumnF"]</th>
            </tr>
        </thead>
        <tbody  id="bootstrap-overrides">
        @foreach(var t in Model.Configs.Where(x=> x.ExpeditionType == type.ExpeditionType && x.ExpeditionZone == zone.ExpeditionZone))
        {
            value = t.ExpeditionType.ToString() + "|" + t.ExpeditionZone.ToString() + "|" + t.ExpCompanyLevel.ToString();
            <tr id="Show|@value" ondblclick="EditRow('@value')">
                @if (AddExpeditionType)
                {
                    <td class ="borders">
                        <img onclick="EditRow('@value')" class="evol-image grow" src="~/images/edit.png" title="@localizer["ChangeExpCompanyConfig"]"/>
                    </td>
                }
                <td>@type.ExpeditionTypeDesc</td>
                <td>@zone.ExpeditionZoneDesc</td>
                <td>@t.ExpCompanyLevel</td>
                <td>
                    @if (t.MaxWeight == null)
                    {
                        @emptyEmptyMaxWeight
                    }
                    else
                    {
                        @string.Format("{0} g", t.MaxWeight)
                    }
                </td>
                <td>@t.UnitCost</td>
                <td>@t.ExpColumnA</td>
                <td>@t.ExpColumnB</td>
                <td>@t.ExpColumnE</td>
                <td>@t.ExpColumnI</td>
                <td>
                    @if (string.IsNullOrEmpty(t.ExpColumnF))
                    {
                        @emptyExpColumnFDesc
                    }
                    else
                    {
                        @t.ExpColumnF
                    }
                </td>
            </tr>
            @if (AddExpeditionType)
            {
                <tr id="Hide|@value" style="display: none">
                  <form id="AddFrm|@value" class="d-flex justify-content-center m-5" asp-area="evolDP" asp-controller="Expedition" asp-action="ChangeExpCompanyConfig"
                  asp-route-startdate="@Model.Configs.First().StartDate" asp-route-pageexpeditiontype="@Model.ExpeditionType" asp-route-pageexpeditionZone="@Model.ExpeditionZone"
                      asp-route-expcompanyJson="@JsonConvert.SerializeObject(Model.ExpCompany)">
                    <td class="borders" style="align-items:center; display:flex">
                        <input onclick="return true" type="image" value="@localizer["SubmitChange"]" class="evol-image grow" name="Submit" src="~/images/Ok.png" />
                    </td>
                    <td>
                            @t.ExpeditionTypeDesc
                        <input style="display: none" id="ExpCompanyID" name="ExpCompanyID" type="text" value="@t.ExpCompanyID" />
                        <input style="display: none" id="ExpeditionType" name="ExpeditionType" type="text" value="@t.ExpeditionType" />
                   </td>
                    <td>
                            @t.ExpeditionZoneDesc
                        <input style="display: none" id="ExpeditionZone" name="ExpeditionZone" type="text" value="@t.ExpeditionZone" />
                    </td>
                    <td>
                            @t.ExpCompanyLevel
                        <input style="display: none" id="ExpCompanyLevel" name="ExpCompanyLevel" type="text" value="@t.ExpCompanyLevel" />
                    </td>
                    <td><input type="number" min="0" max="1000000" id="MaxWeight" name="MaxWeight" value="@t.MaxWeight" /> g</td>
                    @{
                        doubleStr = t.UnitCost.ToString("F2");
                        if (decimalSeparator == ",")
                            doubleStr = doubleStr.Replace(",", ".");
                    }
                    <td><input type="number" min="0" max="1000000" step="0.01" id="UnitCost" name="UnitCost" value="@doubleStr" /></td>
                    <td><input type="text" id="ExpColumnA" name="ExpColumnA" maxlength="10" value="@t.ExpColumnA" /></td>
                    <td><input type="text" id="ExpColumnB" name="ExpColumnB" maxlength="10" value="@t.ExpColumnB" /></td>
                    <td><input type="text" id="ExpColumnE" name="ExpColumnE" maxlength="10" value="@t.ExpColumnE" /></td>
                    <td><input type="text" id="ExpColumnI" name="ExpColumnI" maxlength="10" value="@t.ExpColumnI" /></td>
                    <td><input type="text" id="ExpColumnF" name="ExpColumnF" maxlength="10" value="@t.ExpColumnF" /></td>
                    </form>
                </tr>
            }
        }
        </tbody>
    </table>
    }
    }
}
@section Scripts
    {
    <script type="text/javascript">
        function RegistModeChange() {
            var checkbox = document.getElementById("RegistMode");
            chkElements = document.querySelectorAll('input[id^="checkedDRFlag"]');
            chkElements.forEach(tElement => {
                tElement.checked = checkbox.checked;
            });
        }
        function CancelRow(value) {
            eShide('Hide|' + value);
            eSshow('Show|' + value);
            var obj = document.getElementById("AddFrm|" + value);
            obj.disabled = true;
            return false;
        }
        function EditRow(value) {
            eShide('Show|' + value);
            eSshow('Hide|' + value);
            var obj = document.getElementById("AddFrm|" + value);
            obj.disabled = false;

            let str = 'Hide|' + value;
            trElements = document.querySelectorAll('tr[id^="Hide|"]');
            trElements.forEach(tElement => {
                if (tElement.id != str) {
                    let val = tElement.id.substring(5);
                    CancelRow(val);
                }
            });
        }
        function isClickInsideTr(element) {
            while (element) {
                if (element.id.includes('Hide|') || element.classList.contains('evol-image')) {
                    return true;
                }
                element = element.parentElement;
            }
            return false;
        }
        document.addEventListener('click', function (event) {
            if (!isClickInsideTr(event.target)) {
                trElements = document.querySelectorAll('tr[id^="Hide|"]');
                trElements.forEach(tElement => {
                    let val = tElement.id.substring(5);
                    CancelRow(val);
                });
            }
        });
    </script>
}